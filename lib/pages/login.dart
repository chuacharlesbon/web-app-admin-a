import 'dart:async';
import 'dart:html';

import 'package:captiveportal/components/cp_modal.dart';
import 'package:captiveportal/datasource/create-user.dart';
import 'package:dio/dio.dart';
import 'package:flutter/material.dart';
import 'package:flutter/services.dart';
import 'package:flutter_animate/flutter_animate.dart';
import 'package:google_fonts/google_fonts.dart';
import 'package:google_sign_in/google_sign_in.dart';

class LoginScreen extends StatefulWidget {
  const LoginScreen({
    super.key,
    this.data});
  final dynamic data;

  @override
  State<LoginScreen> createState() =>
      _LoginScreenState();
}

class _LoginScreenState extends State<LoginScreen> {

  var uds = UsersDataSource();
  String currentFullName = "";
  String currentMobileNumber = "";

  void getReferrer() {
    print('This is the referrer ${document.referrer}');
  }

  bool isLoading = false;
  Timer tempTimer = Timer(const Duration(seconds: 2), () {});

  List<String> getFirstNameAndLastName(String fullName) {
    int idx = fullName.indexOf(" "); // Check first occurring space
    List<String> parts = [
      fullName.substring(0, idx).trim(),
      fullName.substring(idx + 1).trim()
    ];
    return parts;
  }

  // Execute google sign in
  // It will check browser if the user is logged in in his/here Google account
  dynamic googleLogin() async {
    final googleSignIn = GoogleSignIn(
      clientId:
          '375941392209-9453ptarnjo7kuv7ajdd17s6cgb2jndk.apps.googleusercontent.com',
      scopes: ['email', 'profile'],
    );
    try {
      return await googleSignIn.signIn();
    } catch (error) {
      return error;
    }
  }

  // Execute Google sign out
  // It will clean browser local storage generated by Google
  dynamic googleLogout() async {
    final googleSignIn = GoogleSignIn(
      clientId:
          '375941392209-9453ptarnjo7kuv7ajdd17s6cgb2jndk.apps.googleusercontent.com',
      scopes: ['email', 'profile'],
    );
    try {
      return await googleSignIn.signOut();
    } catch (error) {
      return error;
    }
  }

  void googleSignIn() async {
    setState(() {
      isLoading = true;
    });
    try{
      final googleUser = await googleLogin();
      String fullName = googleUser.displayName;
      String email = googleUser.email;
      //String firstName = getFirstNameAndLastName(fullName)[0];
      //String lastName = getFirstNameAndLastName(fullName)[1];
      await createUser(fullName: fullName, mobileNumber: "09123456789", email: email);
    }catch(e){
      //
    }
  }

  void formSubmit() async {
    setState(() {
      isLoading = true;
    });
    try{
      final result = await uds.createUser(fullName: currentFullName, mobileNumber: currentMobileNumber, email: "");
      print('This is the result ${result.toString()}');
      // ignore: use_build_context_synchronously
      MyModal.genericOnFuncModal(
        ctx: context,
        message: result['error'] != null
          ? 'ERR ${result['error']}'
          : "Form submitted."
      );
    } on DioException catch (e) {
      if (e.response != null) {
        debugPrint('Dio error!');
        debugPrint('STATUS: ${e.response?.statusCode}');
        debugPrint('DATA: ${e.response?.data}');
        debugPrint('HEADERS: ${e.response?.headers}');
        // ignore: use_build_context_synchronously
        MyModal.genericOnFuncModal(
          ctx: context,
          message: 'ERR: ${e.response?.data['error']}'
        );
      } else {
        debugPrint('Error sending request!');
        debugPrint('ERR ${e.message}');
        // ignore: use_build_context_synchronously
        MyModal.genericOnFuncModal(
          ctx: context,
          message: 'ERR ${e.message}'
        );
      }
    } catch (e) {
      debugPrint('ERR ${e.toString()}');
      // ignore: use_build_context_synchronously
      MyModal.genericOnFuncModal(
        ctx: context,
        message: 'ERR ${e.toString()}'
      );
    }
    setState(() {
      isLoading = false;
    });
  }

  Future<void> createUser({
    required String fullName,
    required String mobileNumber,
    required String email,
  }) async {
    try{
      final result = await uds.createUser(fullName: fullName, mobileNumber: "", email: email);
      print('This is the result ${result.toString()}');
      // ignore: use_build_context_synchronously
      MyModal.genericOnFuncModal(
        ctx: context,
        message: result['error'] != null
          ? 'ERR ${result['error']}'
          : "Form submitted."
      );
    } on DioException catch (e) {
      if (e.response != null) {
        debugPrint('Dio error!');
        debugPrint('STATUS: ${e.response?.statusCode}');
        debugPrint('DATA: ${e.response?.data}');
        debugPrint('HEADERS: ${e.response?.headers}');
        // ignore: use_build_context_synchronously
        MyModal.genericOnFuncModal(
          ctx: context,
          message: 'ERR: ${e.response?.data['error']}'
        );
      } else {
        debugPrint('Error sending request!');
        debugPrint('ERR ${e.message}');
        // ignore: use_build_context_synchronously
        MyModal.genericOnFuncModal(
          ctx: context,
          message: 'ERR ${e.message}'
        );
      }
    } catch (e) {
      debugPrint('ERR ${e.toString()}');
      // ignore: use_build_context_synchronously
      MyModal.genericOnFuncModal(
        ctx: context,
        message: 'ERR ${e.toString()}'
      );
    }
    setState(() {
      isLoading = false;
    });
  }

  @override
  void dispose() {
    tempTimer.cancel();
    super.dispose();
  }

  @override
  void initState() {
    getReferrer();
    super.initState();
  }

  @override
  Widget build(BuildContext context) {
    //Size size = MediaQuery.of(context).size;
    print(currentFullName);
    print(currentMobileNumber);
    return Scaffold(
      /* appBar: AppBar(
        backgroundColor: Theme.of(context).colorScheme.inversePrimary,
        title: Text(widget.title),
      ), */
      body: Container(
        decoration: BoxDecoration(
            image: DecorationImage(
                image: NetworkImage(
                  'https://captive-portal-html-imtg.vercel.app/tekqore.jpg',
                ),
                fit: BoxFit.cover)),
        child: Stack(
          children: [
            Container(
              width: double.infinity,
              height: double.infinity,
              color: Colors.white.withOpacity(0.75),
              padding: const EdgeInsets.all(16),
              child: Center(
                child: Container(
                  constraints: const BoxConstraints(maxWidth: 320),
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                      color: Colors.white,
                      border: Border.all(color: Colors.grey.withOpacity(0.75)),
                      borderRadius: BorderRadius.circular(24)),
                  child: Column(
                    mainAxisSize: MainAxisSize.min,
                    mainAxisAlignment: MainAxisAlignment.center,
                    children: <Widget>[
                      SizedBox(
                        height: 24,
                      ),
                      TextFormField(
                          onChanged: (value) {
                            setState(() {
                              currentFullName = value;
                            });
                          },
                          onFieldSubmitted: (value) {
                            setState(() {
                              currentFullName = value;
                            });
                          },
                          keyboardType: TextInputType.text,
                          inputFormatters: [
                            FilteringTextInputFormatter.allow(
                              RegExp(r'^[a-zA-Z ]+$'),
                            ),
                          ],
                          style: TextStyle(
                              color: Colors.deepPurple,
                              fontFamily: GoogleFonts.montserrat().fontFamily,
                              fontWeight: FontWeight.bold,
                              fontSize: 14),
                          decoration: InputDecoration(
                            hintText: 'Enter name',
                            hintStyle: TextStyle(
                                color: Colors.grey,
                                fontFamily: GoogleFonts.montserrat().fontFamily,
                                fontWeight: FontWeight.bold,
                                fontSize: 14),
                            focusedBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(12.0),
                                borderSide:
                                    BorderSide(color: Colors.deepPurple)),
                            enabledBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(12.0),
                                borderSide:
                                    BorderSide(color: Colors.deepPurple)),
                          )).animate().fadeIn(delay: 250.ms).slideX(begin: .25),
                      SizedBox(
                        height: 12,
                      ),
                      TextFormField(
                          onChanged: (value) {
                            setState(() {
                              currentMobileNumber = value;
                            });
                          },
                          onFieldSubmitted: (value) {
                            setState(() {
                              currentMobileNumber = value;
                            });
                          },
                          keyboardType: TextInputType.number,
                          inputFormatters: [
                            FilteringTextInputFormatter.allow(
                              RegExp(r'^[0-9]+$'),
                            ),
                          ],
                          style: TextStyle(
                              color: Colors.deepPurple,
                              fontFamily: GoogleFonts.montserrat().fontFamily,
                              fontWeight: FontWeight.bold,
                              fontSize: 14),
                          decoration: InputDecoration(
                            hintText: 'Mobile number',
                            hintStyle: TextStyle(
                                color: Colors.grey,
                                fontFamily: GoogleFonts.montserrat().fontFamily,
                                fontWeight: FontWeight.bold,
                                fontSize: 14),
                            focusedBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(12.0),
                                borderSide:
                                    BorderSide(color: Colors.deepPurple)),
                            enabledBorder: OutlineInputBorder(
                                borderRadius: BorderRadius.circular(12.0),
                                borderSide:
                                    BorderSide(color: Colors.deepPurple)),
                          )).animate().fadeIn(delay: 500.ms).slideX(begin: .25),
                      SizedBox(
                        height: 24,
                      ),
                      GestureDetector(
                        onTap: () {
                          formSubmit();
                        },
                        child: Container(
                          padding: const EdgeInsets.all(8),
                          decoration: BoxDecoration(
                              color: Colors.deepPurple,
                              border: Border.all(color: Colors.deepPurple),
                              borderRadius: BorderRadius.circular(24)),
                          child: Center(
                            child: Text(
                              'Submit',
                              style: TextStyle(
                                color: Colors.white,
                                fontFamily: GoogleFonts.montserrat().fontFamily,
                                fontWeight: FontWeight.bold,
                                fontSize: 14),
                            )
                          ),
                        ).animate().fadeIn(delay: 1000.ms).slideX(begin: .25),
                      ),
                      SizedBox(
                        height: 24,
                      ),
                      Row(
                        children: [
                          const Expanded(
                            child: Padding(
                              padding: EdgeInsets.fromLTRB(15, 0, 32, 0),
                              child: Divider(
                                color: Colors.grey,
                              ),
                            ),
                          ),
                          Text(
                            'Or login with',
                          ),
                          const Expanded(
                            child: Padding(
                              padding: EdgeInsets.fromLTRB(32, 0, 15, 0),
                              child: Divider(
                                color: Colors.grey,
                              ),
                            ),
                          ),
                        ],
                      ).animate().fadeIn(delay: 750.ms).slideX(begin: .25),
                      SizedBox(
                        height: 24,
                      ),
                      GestureDetector(
                        onTap: () {
                          googleSignIn();
                        },
                        child: Container(
                          padding: const EdgeInsets.all(8),
                          decoration: BoxDecoration(
                              border: Border.all(color: Colors.deepPurple),
                              borderRadius: BorderRadius.circular(24)),
                          child: Row(
                              mainAxisAlignment: MainAxisAlignment.center,
                              children: [
                                Image.asset('images/social-login-gmail-icon.png'),
                                SizedBox(
                                  width: 10,
                                ),
                                Text(
                                  'Gmail',
                                  style: TextStyle(
                                      color: Colors.deepPurple,
                                      fontFamily:
                                          GoogleFonts.montserrat().fontFamily,
                                      fontWeight: FontWeight.bold,
                                      fontSize: 14),
                                )
                              ]),
                        ).animate().fadeIn(delay: 1000.ms).slideX(begin: .25),
                      ),
                      SizedBox(
                        height: 24,
                      ),
                    ],
                  ),
                ),
              ),
            ),
            if(isLoading)
            Container(
              width: double.infinity,
              height: double.infinity,
              color: Colors.black.withOpacity(0.50),
              child: Center(child: CircularProgressIndicator()),
            )
          ],
        ),
      ), // This trailing comma makes auto-formatting nicer for build methods.
    );
  }
}
